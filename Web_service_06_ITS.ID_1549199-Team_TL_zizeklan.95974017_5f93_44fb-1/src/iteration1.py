import telebot
import traceback
import sys
from telebot import types
from config import BOT_TOKEN
from database2 import init_db, save_user_data, get_last_user_data
from model import predict_stroke_risk

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def safe_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            chat_id = args[0].chat.id if args else None
            if chat_id:
                bot.send_message(chat_id, "–£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            sys.exit(1)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return wrapper

@safe_execute
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_male = types.KeyboardButton("–ú—É–∂—Å–∫–æ–π")
    btn_female = types.KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")
    markup.add(btn_male, btn_female)
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –∏–Ω—Å—É–ª—å—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=markup
    )
    user_data[message.chat.id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

@safe_execute
@bot.message_handler(func=lambda message: message.text in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
def ask_age(message):
    chat_id = message.chat.id
    user_data[chat_id]["gender"] = "Male" if message.text == "–ú—É–∂—Å–∫–æ–π" else "Female"
    
    markup = types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_hypertension)

@safe_execute
def ask_hypertension(message):
    chat_id = message.chat.id
    try:
        age = int(message.text)
        if age < 0 or age > 99:
            raise ValueError
        user_data[chat_id]["age"] = age
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!")
        return bot.register_next_step_handler(message, ask_hypertension)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_yes = types.KeyboardButton("–î–∞")
    btn_no = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn_yes, btn_no)
    
    bot.send_message(
        chat_id,
        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É –≤–∞—Å –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è/–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª–µ–∑–Ω—å?",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_heart_disease)

@safe_execute
def ask_heart_disease(message):
    chat_id = message.chat.id
    user_data[chat_id]["hypertension"] = 1 if message.text == "–î–∞" else 0
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_yes = types.KeyboardButton("–î–∞")
    btn_no = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn_yes, btn_no)
    
    bot.send_message(
        chat_id,
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã?",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_married)

@safe_execute
def ask_married(message):
    chat_id = message.chat.id
    user_data[chat_id]["heart_disease"] = 1 if message.text == "–î–∞" else 0
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_yes = types.KeyboardButton("–î–∞")
    btn_no = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn_yes, btn_no)
    
    bot.send_message(
        chat_id,
        "–í—ã –∂–µ–Ω–∞—Ç—ã/–∑–∞–º—É–∂–µ–º?",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_work)

@safe_execute
def ask_work(message):
    chat_id = message.chat.id
    user_data[chat_id]["ever_married"] = 1 if message.text == "–î–∞" else 0
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_self = types.KeyboardButton("1")
    btn_private = types.KeyboardButton("2")
    btn_govt = types.KeyboardButton("3")
    btn_unemployed = types.KeyboardButton("4")
    markup.add(btn_self, btn_private, btn_govt, btn_unemployed)
    
    bot.send_message(
        chat_id,
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å:\n"
        "1 - –†–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è\n"
        "2 - –†–∞–±–æ—Ç–∞—é –≤ —á–∞—Å—Ç–Ω–æ–π —Ñ–∏—Ä–º–µ\n"
        "3 - –†–∞–±–æ—Ç–∞—é –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏\n"
        "4 - –ö–∞–π—Ñ—É—é (–Ω–µ —Ä–∞–±–æ—Ç–∞—é)",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_residence)

@safe_execute
def ask_residence(message):
    chat_id = message.chat.id
    work_type_map = {
        "1": "Self-employed",
        "2": "Private",
        "3": "Govt_job",
        "4": "Unemployed"
    }
    user_data[chat_id]["work_type"] = work_type_map.get(message.text)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_urban = types.KeyboardButton("–í –≥–æ—Ä–æ–¥–µ")
    btn_rural = types.KeyboardButton("–í —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏")
    markup.add(btn_urban, btn_rural)
    
    bot.send_message(
        chat_id,
        "–£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_glucose)

@safe_execute
def ask_glucose(message):
    chat_id = message.chat.id
    user_data[chat_id]["Residence_type"] = 1 if message.text == "–í –≥–æ—Ä–æ–¥–µ" else 0
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_unknown = types.KeyboardButton("–ù–µ –∑–Ω–∞—é")
    markup.add(btn_unknown)
    
    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 3.3). –ï—Å–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –∑–Ω–∞—é¬ª:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_bmi)

@safe_execute
def ask_bmi(message):
    chat_id = message.chat.id
    if message.text == "–ù–µ –∑–Ω–∞—é":
        user_data[chat_id]["avg_glucose_level"] = None
    else:
        try:
            glucose = float(message.text)
            if glucose < 0 or glucose > 30:
                raise ValueError
            user_data[chat_id]["avg_glucose_level"] = glucose
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π, –∞ –Ω–µ –∑–∞–ø—è—Ç–æ–π.")
            return bot.register_next_step_handler(message, ask_bmi)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_unknown = types.KeyboardButton("–ù–µ –∑–Ω–∞—é")
    markup.add(btn_unknown)
    
    bot.send_message(
        chat_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ú–¢ (–∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 21 –∏–ª–∏ 21.3 –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –∑–Ω–∞—é¬ª:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_smoking)

@safe_execute
def ask_smoking(message):
    chat_id = message.chat.id
    if message.text == "–ù–µ –∑–Ω–∞—é":
        user_data[chat_id]["bmi"] = None
    else:
        try:
            bmi = float(message.text)
            if bmi < 10 or bmi > 50:
                raise ValueError
            user_data[chat_id]["bmi"] = bmi
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π, –∞ –Ω–µ –∑–∞–ø—è—Ç–æ–π.")
            return bot.register_next_step_handler(message, ask_bmi)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_yes = types.KeyboardButton("–î–∞")
    btn_no = types.KeyboardButton("–ù–µ—Ç")
    btn_former = types.KeyboardButton("–†–∞–Ω—å—à–µ –∫—É—Ä–∏–ª")
    markup.add(btn_yes, btn_no, btn_former)
    
    bot.send_message(
        chat_id,
        "–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_results)

@safe_execute
def process_results(message):
    chat_id = message.chat.id
    user_data[chat_id]["smoking_status"] = (
        "smokes" if message.text == "–î–∞" else ("never smoked" if message.text == "–ù–µ—Ç" else "formerly smoked")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    data = {
        "gender": user_data[chat_id]["gender"],
        "age": user_data[chat_id]["age"],
        "hypertension": user_data[chat_id]["hypertension"],
        "heart_disease": user_data[chat_id]["heart_disease"],
        "ever_married": user_data[chat_id]["ever_married"],
        "work_type": user_data[chat_id]["work_type"],
        "Residence_type": user_data[chat_id]["Residence_type"],
        "avg_glucose_level": user_data[chat_id].get("avg_glucose_level", 0),
        "bmi": user_data[chat_id].get("bmi", 0),
        "smoking_status": user_data[chat_id]["smoking_status"],
    }
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ 
    probability, risk_level = predict_stroke_risk(data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ç–æ–º —Ç—É—Ç –º–± –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–¥–æ)
    save_user_data(chat_id, data, probability)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    response = (
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –∏–Ω—Å—É–ª—å—Ç–∞:\n\n"
        f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability*100:.1f}%\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
    )
    
    if risk_level in ["–í—ã—Å–æ–∫–∏–π", "–ö—Ä–∞–π–Ω–µ –≤—ã—Å–æ–∫–∏–π"]:
        response += "‚ùó –°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!"
    elif risk_level == "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π":
        response += "‚ö† –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    else:
        response += "‚úÖ –í–∞—à —Ä–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤–∞–∂–Ω—ã."
    
    bot.send_message(
        chat_id,
        response,
        reply_markup=types.ReplyKeyboardRemove()
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_new = types.KeyboardButton("–õ–µ—Å–≥–æ–æ–æ–æ")
    btn_exit = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn_new, btn_exit)

    bot.send_message(
        chat_id,
        "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å?",
        reply_markup=markup
    )

@safe_execute
@bot.message_handler(func=lambda message: message.text == "–õ–µ—Å–≥–æ–æ–æ–æ")
def new_record(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    chat_id = message.chat.id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_data:
        del user_data[chat_id]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    user_data[chat_id] = {}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_male = types.KeyboardButton("–ú—É–∂—Å–∫–æ–π")
    btn_female = types.KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")
    markup.add(btn_male, btn_female)
    
    bot.send_message(
        chat_id,
        "–•–æ—Ä–æ—à–æ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=markup
    )

@safe_execute
@bot.message_handler(func=lambda message: message.text == "–ù–µ—Ç")
def exit_bot(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    chat_id = message.chat.id
    if chat_id in user_data:
        del user_data[chat_id]
    
    bot.send_message(
        chat_id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –î–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=types.ReplyKeyboardRemove()
    )
    raise SystemExit


if __name__ == "__main__":
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.polling(none_stop=True)